name: D365 Friends Backend CI/CD Workflow

on:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - master
      - develop

jobs:
  health-check-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache dependency
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"
      - name: Check Python version
        run: python --version
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Check Syntax
        run: pycodestyle --statistics .
      - name: Run Migrations
        run: python manage.py migrate
      - name: Run Test # running tests
        run: python manage.py test

  package-job: # package job for building and publishing docker images
    runs-on: ubuntu-latest
    needs: [health-check-job] # will be fired if and only if health-check-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
    steps:
      - name: Checkout Code # checking out code.
        uses: actions/checkout@v2
      - name: Build & Publish Image # we are using a public GitHub Action to build and publish docker image to our GCR registry.
        uses: docker/build-push-action@v1
        env:
          app_name: app
        with:
          username: _json_key # default for gcr.io
          password: ${{ secrets.GKE_PASSWORD }} # service account file to be set as secret
          registry: gcr.io # gcr registry domain
          repository: ${{secrets.GKE_PROJECT}}/github-django-actions/app # GKE_PROJECT is out GCP Project id to be set as secret.
          tag_with_sha: true # this will tag our image with commit id. For example our image our be gcr.io/project-id/github-django-actions/app:sha-7865423 where 7865423 is the short sha of our commit.

  deploy-job: # deploy job is for deploying our code to google cloud cluster.
    runs-on: ubuntu-latest
    needs: [package-job] # will require package-job to be successful for triggering
    if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
    steps:
      - name: Checkout code # checking out code.
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master # settings up gcloud cli in our job machine.
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }} # email address of our service account that will be created with storage and kubernetes permissions
          service_account_key: ${{ secrets.GKE_PASSWORD }} # service account file.
      - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
        id: repo
        run: echo "::set-output name=repo_name::gcr.io/${{secrets.GKE_PROJECT}}/github-django-actions/app:sha-$(git rev-parse --short HEAD)" # we are setting the image location as output to be used in later step
      - name: Check Repo Location
        run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
      - name: Install Helm # helm installation in our runner for deploying.
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Connect to kubernetes cluster
        run: |
          gcloud container clusters get-credentials ${{secrets.GKE_CLUSTER}} --zone ${{secrets.GKE_ZONE}} --project ${{secrets.GKE_PROJECT}}
      - name: Helm Deploy # deploying our helm chart to our cluster
        run: >
          helm upgrade
          --install
          --set image=${{ steps.repo.outputs.repo_name }}
          --set user=${{ secrets.DB_USER }}
          --set password=${{ secrets.DB_PASSWORD }}
          --set host=${{ secrets.DB_HOST }}
          --set port=${{ secrets.DB_PORT }}
          --set name=${{ secrets.DB_NAME }}
          --wait
          --atomic
          app
          ./k8s
      - name: Check pods # checking pod list to see if they are running.
        run: kubectl get pods
